{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/NavBar.js","components/dashboard/Notifications.js","components/messages/Message.js","components/messages/MessageList.js","components/dashboard/Dashboard.js","components/messages/MessageDetails.js","auth/SignIn.js","auth/SignUp.js","store/actions/messageActions.js","components/messages/CreateMessage.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/messageReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SignedOutLinks","state","console","log","firebase","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","Message","message","title","authorFirstName","authorLastName","createdAt","calendar","MessageList","messages","Dashboard","this","React","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","date","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","createMessage","authorId","add","Date","CreateMessage","history","push","App","NavBar","exact","path","component","MessageDetails","Boolean","window","location","hostname","initialState","authReducer","action","messageReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAoBeA,cAAQ,MANI,SAACC,GAC1B,MAAO,CACLC,QAAS,kBAAMD,GCAR,SAACA,EAAUE,EAAX,IACcC,EADyB,EAAjBA,eAGhBC,OAAOH,UAAUI,MAAK,WAC/BL,EAAS,CAAEM,KAAM,8BDAVP,EAfO,SAACQ,GAAD,OACpB,wBAAIC,UAAU,SACd,4BAAI,kBAAC,IAAD,CAASC,GAAG,WAAZ,gBACJ,4BAAI,uBAAGC,QAASH,EAAMN,SAAlB,YACF,4BAAI,kBAAC,IAAD,CAASQ,GAAG,IAAID,UAAU,mCAAmCD,EAAMI,QAAQC,eECpEC,EAPQ,kBACrB,wBAAIL,UAAU,SACd,4BAAI,kBAAC,IAAD,CAASC,GAAG,WAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAZ,cCuBSV,eARS,SAACe,GAEvB,OADAC,QAAQC,IAAIF,GACL,CACLV,KAAMU,EAAMG,SAASb,KACrBO,QAASG,EAAMG,SAASN,WAIbZ,EAvBA,SAACQ,GAAW,IACjBH,EAAkBG,EAAlBH,KAAMO,EAAYJ,EAAZI,QACdI,QAAQC,IAAIZ,GACZ,IAAMc,EAAQd,EAAKe,IAAM,kBAAC,EAAD,CAAeR,QAASA,IAAc,kBAAC,EAAD,MAC/D,OACA,yBAAKH,UAAU,6BACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,cAAvB,iBACEU,O,iBCaOE,EAzBO,SAACb,GAAW,IACxBc,EAAkBd,EAAlBc,cACR,OACF,yBAAKb,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,cAAhB,iBACA,wBAAIA,UAAU,iBACVa,GAAiBA,EAAcC,KAAI,SAAAC,GACnC,OACE,wBAAIC,IAAKD,EAAKE,IACZ,0BAAMjB,UAAU,aAAae,EAAKG,KAAlC,KACA,8BAAOH,EAAKI,SACZ,yBAAKnB,UAAU,+BACZoB,IAAOL,EAAKM,KAAKC,UAAUC,oBCJ7BC,EAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,yBAAKzB,UAAU,kCACb,yBAAKA,UAAU,wCACb,0BAAMA,UAAU,cAAcyB,EAAQC,OACtC,wCAAcD,EAAQE,gBAAtB,IAAwCF,EAAQG,gBAChD,uBAAG5B,UAAU,aAAaoB,IAAOK,EAAQI,UAAUP,UAAUQ,eCQpDC,EAZK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,yBAAKhC,UAAU,yBACXgC,GAAYA,EAASlB,KAAI,SAAAW,GACzB,OACE,kBAAC,IAAD,CAAMT,IAAKS,EAAQR,GAAIhB,GAAI,YAAcwB,EAAQR,IACjD,kBAAC,EAAD,CAASQ,QAASA,U,gBCFpBQ,E,iLAEM,IAAD,EACmCC,KAAKnC,MAAvCiC,EADD,EACCA,SAAUpC,EADX,EACWA,KAAMiB,EADjB,EACiBA,cACxB,OAAKjB,EAAKe,IAER,yBAAKX,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAagC,SAAUA,KAEzB,yBAAKhC,UAAU,wBACb,kBAAC,EAAD,CAAea,cAAeA,OARhB,kBAAC,IAAD,CAAUZ,GAAG,gB,GAJfkC,IAAMC,WA4BfC,cACb9C,aATsB,SAACe,GACvB,MAAO,CACL0B,SAAU1B,EAAMgC,UAAUC,QAAQ,iBAClC3C,KAAMU,EAAMG,SAASb,KACrBiB,cAAeP,EAAMgC,UAAUC,QAAhB,kBAMjBC,2BAAiB,CACf,CAAEC,WAAY,gBAAiBC,QAAS,CAAC,YAAa,SACtD,CAAED,WAAY,gBAAiBE,MAAO,EAAGD,QAAS,CAAC,OAAQ,WAJhDL,CAMbJ,GCIaI,cACb9C,aAXsB,SAACe,EAAOsC,GAC9B,IAAM3B,EAAK2B,EAASC,MAAMC,OAAO7B,GAC3Be,EAAW1B,EAAMgC,UAAUS,KAAK,iBAEtC,MAAO,CACLtB,QAFcO,EAAWA,EAASf,GAAM,KAGxCrB,KAAMU,EAAMG,SAASb,SAMvB4C,2BAAiB,CACf,CAAEC,WAAY,mBAHHJ,EAtCQ,SAACtC,GAAW,IAC3B0B,EAAkB1B,EAAlB0B,QACR,IAD0B1B,EAATH,KACPe,IAAK,OAAO,kBAAC,IAAD,CAAUV,GAAG,YACnC,GAAIwB,EAAS,CACX,IAAIuB,EAAO5B,IAAOK,EAAQI,UAAUP,UAAUQ,WAE9C,OADAvB,QAAQC,IAAIwC,GAEV,yBAAKhD,UAAU,qCACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,cAAcyB,EAAQC,OACtC,2BAAID,EAAQN,UAEd,yBAAKnB,UAAU,wCACb,0CAAgByB,EAAQE,gBAAxB,IAA0CF,EAAQG,gBAClD,6BAAMoB,MAMd,OACE,yBAAKhD,UAAU,oBACb,qD,QCzBAiD,E,2MACJ3C,MAAQ,CACN4C,MAAO,GACPC,SAAU,I,EAGZC,aAAe,SAACC,GACd9C,QAAQC,IAAI6C,GACZ,EAAKC,SAAL,eACGD,EAAEE,OAAOtC,GAAKoC,EAAEE,OAAOC,S,EAI5BC,aAAe,SAACJ,GACdA,EAAEK,iBACFnD,QAAQC,IAAI,cAAe,EAAKT,OAChC,EAAKA,MAAM4D,OAAO,EAAKrD,Q,wEAIf,IAAD,EACoB4B,KAAKnC,MAAzB6D,EADA,EACAA,UACP,OAFO,EACWhE,KACTe,IAAY,kBAAC,IAAD,CAAUV,GAAG,MAEhC,yBAAKD,UAAU,aACb,0BAAM6D,SAAU3B,KAAKuB,aAAczD,UAAU,SAC3C,wBAAIA,UAAU,2BAAd,WACA,yBAAKA,UAAU,eACb,2BAAO8D,QAAQ,SAAf,SACA,2BAAOhE,KAAK,QAAQmB,GAAG,QAAQ8C,SAAU7B,KAAKkB,gBAEhD,yBAAKpD,UAAU,eACb,2BAAO8D,QAAQ,YAAf,YACA,2BAAOhE,KAAK,WAAWmB,GAAG,WAAW8C,SAAU7B,KAAKkB,gBAEtD,yBAAKpD,UAAU,eACb,4BAAQA,UAAU,gCAAlB,WACA,yBAAKA,UAAU,mBACX4D,EAAY,2BAAKA,GAAkB,a,GAtC9BxB,aA4DN7C,eAbS,SAACe,GACvB,MAAO,CACLsD,UAAWtD,EAAMV,KAAKgE,UACtBhE,KAAMU,EAAMG,SAASb,SAIE,SAACJ,GAC1B,MAAO,CACLmE,OAAQ,SAACK,GAAD,OAAWxE,GR7DAyE,EQ6DgBD,ER5D9B,SAACxE,EAAUE,EAAX,IACYC,EAD6B,EAAlBA,eAGnBC,OAAOsE,2BACdD,EAAYf,MACZe,EAAYd,UACZtD,MAAK,WACHL,EAAS,CAAEM,KAAM,qBAClBqE,OAAM,SAACC,GACN5E,EAAS,CAAEM,KAAM,cAAesE,cAVlB,IAACH,MQiER1E,CAA6C0D,GC5DtDoB,E,2MACJ/D,MAAQ,CACN4C,MAAO,GACPC,SAAU,GACVmB,UAAW,GACXC,SAAU,I,EAIZnB,aAAe,SAACC,GACd9C,QAAQC,IAAI6C,GACZ,EAAKC,SAAL,eACGD,EAAEE,OAAOtC,GAAKoC,EAAEE,OAAOC,S,EAI5BC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAK3D,MAAMyE,OAAO,EAAKlE,Q,wEAIf,IAAD,EACqB4B,KAAKnC,MAAzBH,EADD,EACCA,KAAMgE,EADP,EACOA,UACd,OAAIhE,EAAKe,IAAY,kBAAC,IAAD,CAAUV,GAAG,MAEhC,yBAAKD,UAAU,aACb,0BAAM6D,SAAU3B,KAAKuB,aAAczD,UAAU,SAC3C,wBAAIA,UAAU,2BAAd,WACA,yBAAKA,UAAU,eACb,2BAAO8D,QAAQ,SAAf,SACA,2BAAOhE,KAAK,QAAQmB,GAAG,QAAQ8C,SAAU7B,KAAKkB,gBAEhD,yBAAKpD,UAAU,eACb,2BAAO8D,QAAQ,YAAf,YACA,2BAAOhE,KAAK,WAAWmB,GAAG,WAAW8C,SAAU7B,KAAKkB,gBAEtD,yBAAKpD,UAAU,eACb,2BAAO8D,QAAQ,aAAf,cACA,2BAAOhE,KAAK,OAAOmB,GAAG,YAAY8C,SAAU7B,KAAKkB,gBAEnD,yBAAKpD,UAAU,eACb,2BAAO8D,QAAQ,YAAf,aACA,2BAAOhE,KAAK,OAAOmB,GAAG,WAAW8C,SAAU7B,KAAKkB,gBAElD,yBAAKpD,UAAU,eACb,4BAAQA,UAAU,gCAAlB,YAEF,yBAAKA,UAAU,mBACX4D,EAAY,2BAAKA,GAAkB,Y,GAjD5BxB,aAsEN7C,eAPS,SAACe,GACvB,MAAO,CACLsD,UAAWtD,EAAMV,KAAKgE,UACtBhE,KAAMU,EAAMG,SAASb,SATE,SAACJ,GAC1B,MAAO,CACLgF,OAAQ,SAACC,GAAD,OAAajF,ETvCH,SAACiF,GACnB,OAAO,SAACjF,EAAUE,EAAX,GAAsD,IAAhCC,EAA+B,EAA/BA,YAAa+E,EAAkB,EAAlBA,aAChCjE,EAAWd,IACX2C,EAAYoC,IAElBjE,EAASb,OAAO+E,+BACZF,EAAQvB,MACRuB,EAAQtB,UACVtD,MAAK,SAAC+E,GACJ,OAAOtC,EAAUG,WAAW,SAASoC,IAAID,EAAK1D,KAAKP,KAAKmE,IAAK,CACzDR,UAAWG,EAAQH,UACnBC,SAAUE,EAAQF,SAClBnE,SAAUqE,EAAQH,UAAU,GAAKG,EAAQF,SAAS,QAEvD1E,MAAK,WACJL,EAAS,CAAEM,KAAM,sBAClBqE,OAAM,SAAAC,GACL5E,EAAS,CAAEM,KAAM,eAAgBsE,YSsBXI,CAAOC,QAW1BlF,CAA6C8E,G,8NC3ErD,IAAMU,EAAgB,SAACtD,GAC1B,OAAO,SAACjC,EAAUE,EAAX,GAAsD,EAAhCC,YAAiC,IACvD2C,GAAYoC,EAD0C,EAAnBA,gBAEnCvE,EAAUT,IAAWe,SAASN,QAC9B6E,EAAWtF,IAAWe,SAASb,KAAKe,IAC1C2B,EAAUG,WAAW,iBAAiBwC,I,yVAAtC,IACOxD,EADP,CAEIE,gBAAiBxB,EAAQmE,UACzB1C,eAAgBzB,EAAQoE,SACxBS,SAAUA,EACVnD,UAAW,IAAIqD,QAChBrF,MAAK,WACJL,EAAS,CAAEM,KAAM,iBAAkB2B,eACjC0C,OAAM,SAACC,GACN5E,EAAS,CAAEM,KAAM,uBAAwBsE,aCT/Ce,E,2MACJ7E,MAAQ,CACNoB,MAAO,GACPP,QAAS,I,EAGXiC,aAAe,SAACC,GACd9C,QAAQC,IAAI6C,GACZ,EAAKC,SAAL,eACGD,EAAEE,OAAOtC,GAAKoC,EAAEE,OAAOC,S,EAI5BC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAK3D,MAAMgF,cAAc,EAAKzE,OAC9B,EAAKP,MAAMqF,QAAQC,KAAK,M,wEAKxB,OADiBnD,KAAKnC,MAAdH,KACEe,IAER,yBAAKX,UAAU,aACb,0BAAM6D,SAAU3B,KAAKuB,aAAczD,UAAU,SAC3C,wBAAIA,UAAU,2BAAd,kBACA,yBAAKA,UAAU,eACb,2BAAO8D,QAAQ,SAAf,SACA,2BAAOhE,KAAK,OAAOmB,GAAG,QAAQ8C,SAAU7B,KAAKkB,gBAE/C,yBAAKpD,UAAU,eACb,2BAAO8D,QAAQ,WAAf,WACA,8BAAU7C,GAAG,UAAUjB,UAAU,uBAAuB+D,SAAU7B,KAAKkB,gBAEzE,yBAAKpD,UAAU,eACb,4BAAQA,UAAU,gCAAlB,aAdc,kBAAC,IAAD,CAAUC,GAAG,gB,GArBXmC,aAuDb7C,eAXS,SAACe,GACvB,MAAO,CACLV,KAAMU,EAAMG,SAASb,SAIE,SAACJ,GAC1B,MAAO,CACLuF,cAAe,SAACtD,GAAD,OAAajC,EAASuF,EAActD,QAGxClC,CAA6C4F,GChC7CG,E,iLAjBX,OACE,kBAAC,IAAD,KACE,yBAAKtF,UAAU,OACb,kBAACuF,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzD,IACjC,kBAAC,IAAD,CAAOwD,KAAK,eAAeC,UAAWC,IACtC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWzC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,UAAUC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,UAAUC,UAAWP,W,GAX3BhD,IAAMC,WCGJwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlD,MACvB,2D,yjBClBN,IAAMmD,EAAe,CACjBpC,UAAW,MAqCAqC,EAlCK,WAAmC,IAAlC3F,EAAiC,uDAAzB0F,EAAcE,EAAW,uCAClD,OAAOA,EAAOpG,MACZ,IAAK,cAEH,OADAS,QAAQC,IAAI,eACL,KACAF,EADP,CAEIsD,UAAW,iBAEjB,IAAK,gBAEH,OADErD,QAAQC,IAAI,iBACP,KACAF,EADP,CAEIsD,UAAW,OAEjB,IAAK,kBAED,OADArD,QAAQC,IAAI,mBACLF,EACX,IAAK,iBAED,OADAC,QAAQC,IAAI,kBACL,KACAF,EADP,CAEIsD,UAAW,OAEnB,IAAK,eAED,OADArD,QAAQC,IAAI,kBACL,KACAF,EADP,CAEIsD,UAAWsC,EAAO9B,IAAI3C,UAE9B,QACI,OAAOnB,IClCX0F,EAAe,CACjBhE,SAAU,IAiBCmE,EAbQ,WAAmC,IAAlC7F,EAAiC,uDAAzB0F,EAAcE,EAAW,uCACvD,OAAQA,EAAOpG,MACb,IAAK,iBAEH,OADAS,QAAQC,IAAI,kBAAmB0F,EAAOzE,SAC/BnB,EACT,IAAK,uBAEH,OADAC,QAAQC,IAAI,uBAAwB0F,EAAO9B,KACpC9D,EACT,QACE,OAAOA,I,QCDE8F,EAPKC,YAAgB,CAChCzG,KAAMqG,EACNxE,QAAS0E,EACT7D,UAAWgE,mBACX7F,SAAU8F,oB,yCCIZ9F,IAAS+F,cAVU,CACjBC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,8CAKMtG,QAAf,ECHIuG,EAAQC,YAAYb,EACxB/D,YACE6E,YAAgBC,IAAMC,kBAAkB,CAACzH,0BAAa+E,+BACtD2C,yBAAeC,GACfC,6BAAmBD,EAAU,CAACE,wBAAwB,EAAMC,YAAa,QAASC,mBAAmB,MAIzGV,EAAMW,oBAAoB9H,MAAK,WAC7B+H,IAASC,OACL,kBAAC,IAAD,CAAUb,MAAOA,GACb,kBAAC,EAAD,OAENc,SAASC,eAAe,YLuGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrI,MAAK,SAAAsI,GACjCA,EAAaC,kB","file":"static/js/main.bdbb23c8.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions'\n\nconst SignedInLinks = (props) => (\n  <ul className=\"right\">\n  <li><NavLink to='/create'>New Message</NavLink></li>\n  <li><a onClick={props.signOut} >Log Out</a></li>\n    <li><NavLink to='/' className='btn btn-floating pink lighten-1'>{props.profile.initials}</NavLink></li>\n  \n  </ul>\n);\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks);\n","export const signIn = (credentials) => {\n  return (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase();\n\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password,\n    ).then(() => {\n        dispatch({ type: 'LOGIN_SUCCESS' })\n    }).catch((err) => {\n        dispatch({ type: 'LOGIN_ERROR', err });\n    })\n  }\n}\n\nexport const signOut = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n        dispatch({ type: 'SIGNOUT_SUCCESS' });\n        })\n    }\n}\n\nexport const signUp = (newUser) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password,\n        ).then((resp) => {\n            return firestore.collection('users').doc(resp.user.uid).set ({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0],\n            })\n        }).then(() => {\n            dispatch({ type: 'SIGNUP_SUCCESS'})\n        }).catch(err => {\n            dispatch({ type: 'SIGNUP_ERROR', err })\n        })\n    }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOutLinks = () => (\n  <ul className=\"right\">\n  <li><NavLink to='/signup'>Sign Up</NavLink></li>\n  <li><NavLink to='/signin'>Sign In</NavLink></li>\n  </ul>\n);\n\nexport default SignedOutLinks;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\nimport { connect } from 'react-redux';\n\nconst Navbar = (props) => {\n  const { auth, profile } = props;\n  console.log(auth);\n  const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />;\n  return (\n  <nav className=\"nav-wrapper grey darken-3\">\n    <div className=\"container\">\n    <div className=\"container\"></div>\n      <Link to='/' className=\"brand-logo\">Message Board</Link>\n      { links }\n    </div>\n  </nav>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile,\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar);\n","import React from 'react';\nimport moment from 'moment';\n\nconst Notifications = (props) => {\n  const { notifications } = props;\n  return (\n<div className=\"section\">\n  <div className=\"card z-depth-0\">\n    <div className=\"card-content\">\n      <span className=\"card-title\">Notifications</span>\n      <ul className=\"notifications\">\n        { notifications && notifications.map(item => {\n          return(\n            <li key={item.id}>\n              <span className=\"pink-text\">{item.user} </span>\n              <span>{item.content}</span>\n              <div className=\"grey-text notification-date\">\n                {moment(item.time.toDate()).fromNow()}\n              </div>\n            </li>\n          )\n        }) }\n      </ul>\n    </div>\n  </div>\n</div>\n)};\n\nexport default Notifications;\n","import React from 'react';\nimport moment from 'moment';\n\nconst Message = ({ message }) => (\n  <div className='card z-depth-0 message-summary'>\n    <div className='card-content grey-text text-darken-3'>\n      <span className='card-title'>{message.title}</span>\n      <p>Posted by {message.authorFirstName} {message.authorLastName}</p>\n      <p className='grey-text'>{moment(message.createdAt.toDate()).calendar()}</p>\n    </div>\n  </div>\n);\n\nexport default Message;\n","import React from 'react';\nimport Message from './Message';\nimport { Link } from 'react-router-dom';\n\nconst MessageList = ({ messages }) => (\n  <div className='messages-list section'>\n    { messages && messages.map(message => {\n      return (\n        <Link key={message.id} to={'/message/' + message.id}>\n        <Message message={message}/>\n        </Link>\n      )\n    })}\n  </div>\n);\n\nexport default MessageList\n","import React from 'react';\nimport Notifications from './Notifications';\nimport MessageList from '../messages/MessageList.js';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom'\nclass Dashboard extends React.Component {\n  \n  render() {\n    const { messages, auth, notifications } = this.props;\n    if (!auth.uid) return <Redirect to='/signin' />\n    return (\n      <div className=\"dashboard container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <MessageList messages={messages}/>\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications notifications={notifications} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state.firestore.ordered['message-board'],\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered['notifications'],\n  }\n}\n\nexport default compose (\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'message-board', orderBy: ['createdAt', 'desc']},\n    { collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\n  ])\n)(Dashboard)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\nconst MessageDetails = (props) => {\nconst { message, auth } = props;\nif (!auth.uid) return <Redirect to='/signin' />\nif (message) {\n  let date = moment(message.createdAt.toDate()).calendar();\n  console.log(date);\n  return(\n    <div className=\"container section message-details\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">{message.title}</span>\n          <p>{message.content}</p>\n        </div>\n        <div className=\"card-action grey lighten-4 grey-text\">\n          <div>Posted By {message.authorFirstName} {message.authorLastName}</div>\n          <div>{date}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n  return (\n    <div className=\"container center\">\n      <p>Loading project...</p>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.match.params.id;\n  const messages = state.firestore.data['message-board'];\n  const message = messages ? messages[id] : null;\n  return {\n    message: message,\n    auth: state.firebase.auth,\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'message-board'}\n  ])\n)(MessageDetails);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn } from '../store/actions/authActions.js';\nimport { Redirect } from 'react-router-dom';\n\nclass SignIn extends Component {\n  state = {\n    email: '',\n    password: '',\n  };\n\n  handleChange = (e) => {\n    console.log(e);\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"i submitted\", this.props)\n    this.props.signIn(this.state)\n\n  };\n\n  render() {\n    const{ authError, auth } = this.props;\n    if (auth.uid) return <Redirect to='/' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign In</button>\n            <div className=\"red-text center\">\n              { authError ? <p>{ authError }</p> : null }\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signUp } from '../store/actions/authActions'\n\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n\n  };\n\n  handleChange = (e) => {\n    console.log(e);\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.signUp(this.state)\n\n  };\n\n  render() {\n    const { auth, authError } = this.props;\n    if (auth.uid) return <Redirect to='/' />  \n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Sign Up</button>\n          </div>\n          <div className=\"red-text center\">\n            { authError ? <p>{ authError }</p> : null}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth,\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","export const createMessage = (message) => {\n    return (dispatch, getState, {getFirebase, getFirestore }) => {\n     const firestore = getFirestore();\n     const profile = getState().firebase.profile;\n     const authorId = getState().firebase.auth.uid;\n     firestore.collection('message-board').add({\n         ...message, \n         authorFirstName: profile.firstName,\n         authorLastName: profile.lastName,\n         authorId: authorId,\n         createdAt: new Date(),\n     }).then(() => {\n         dispatch({ type: 'CREATE_MESSAGE', message})\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_MESSAGE_ERROR', err})\n        })\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createMessage } from '../../store/actions/messageActions';\nimport { Redirect } from 'react-router-dom'\n\nclass CreateMessage extends Component {\n  state = {\n    title: '',\n    content: '',\n  };\n\n  handleChange = (e) => {\n    console.log(e);\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.createMessage(this.state);\n    this.props.history.push('/');\n  };\n\n  render() {\n    const { auth } = this.props;\n    if (!auth.uid) return <Redirect to='/signin' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Create Message</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"content\">Content</label>\n            <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Submit</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createMessage: (message) => dispatch(createMessage(message))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateMessage);\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport NavBar from './components/layout/NavBar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport MessageDetails from './components/messages/MessageDetails';\nimport SignIn from './auth/SignIn';\nimport SignUp from './auth/SignUp';\nimport CreateMessage from './components/messages/CreateMessage';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <NavBar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/message/:id' component={MessageDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateMessage} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    authError: null,\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'LOGIN_ERROR':\n        console.log('login error');\n        return {\n            ...state,\n            authError: 'Login failed'\n        }\n      case 'LOGIN_SUCCESS':\n          console.log('login success')\n        return {\n            ...state,\n            authError: null\n        }\n      case 'SIGNOUT_SUCCESS':\n          console.log('signout success');\n          return state;\n      case 'SIGNUP_SUCCESS':\n          console.log('signup success');\n          return {\n              ...state,\n              authError: null\n          }\n      case 'SIGNUP_ERROR':\n          console.log('signup success')\n          return {\n              ...state,\n              authError: action.err.message,\n          }\n      default:\n          return state;\n    }\n}\n\nexport default authReducer\n","const initialState = {\n    messages: [\n    ]\n}\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CREATE_MESSAGE': \n      console.log('created message', action.message);\n      return state;\n    case 'CREATE_MESSAGE_ERROR':\n      console.log('create message error', action.err)\n      return state;\n    default: \n      return state;\n    }\n}\n\nexport default messageReducer","import authReducer from './authReducer';\nimport messageReducer from './messageReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    message: messageReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer,\n})\n\nexport default rootReducer","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyDQRyDdGoL_AJoGrltQkp9ZwJN0YWFA6zY\",\n    authDomain: \"react-redux-message-boar-33c15.firebaseapp.com\",\n    databaseURL: \"https://react-redux-message-boar-33c15.firebaseio.com\",\n    projectId: \"react-redux-message-boar-33c15\",\n    storageBucket: \"\",\n    messagingSenderId: \"366050809023\",\n    appId: \"1:366050809023:web:3ce42ac5a4e3d7e0ae220a\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\n\nconst store = createStore(rootReducer, \n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    reduxFirestore(fbConfig),\n    reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true}),\n  )\n);\n\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(\n      <Provider store={store}>\n          <App /> \n      </Provider>,\n    document.getElementById('root'));\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}